Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Maximum possible value = 240 
by taking items of weight 10 and 20 kg and 2/3 fraction 
of 30 kg. Hence total price will be 60+100+(2/3)(120) = 240

//The basic idea of the greedy approach is to calculate the ratio value/weight for each item 
and sort the item on basis of this ratio. Then take the item with the highest ratio and add them until we canâ€™t add the next item as a whole
and at the end add the next item as much as we can. This will always be the optimal solution to this problem.

double fractionalKnapsack(int w, Item arr[], int n)
    {
        sort(arr,arr+n,[](Item a,Item b)
        {
            return (double)a.value/(double)a.weight>(double)b.value/(double)b.weight;
        });
        double c=0;
        for(int i=0;i<n;i++)
        {
            if(w>0)
            {
                if(w-arr[i].weight>=0)
                {
                    w-=arr[i].weight;
                    c+=arr[i].value;
                }
                else
                {
                    double d=(double)w/(double)arr[i].weight;
                    c+=d*arr[i].value;
                    break;
                }
            }
        }
        return c;
    }
