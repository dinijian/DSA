Given a set of N jobs where each jobi has a deadline and profit associated with it. Each job takes 1 unit of time to complete and only one job can be scheduled at a time.
We earn the profit if and only if the job is completed by its deadline. The task is to find the number of jobs done and the maximum profit.

N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).

// 1)Sort all jobs in decreasing order of profit.

2)Iterate on jobs in decreasing order of profit.

3)For each job, do the following: 

Find a time slot i, such that slot is empty and i < deadline and i is greatest.
Put the job in this slot and mark this slot filled. 
If no such i exists, then ignore the job. 
 
 
 vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,[](Job j1,Job j2){
            return j1.profit>j2.profit;
        });
        int mx=0;
        for(int i=0;i<n;i++)
        {
            mx=max(mx,arr[i].dead);
        }
        bool slot[n]={false};
        
        int result[n];
        int c=0,s=0;
        for(int i=0;i<n;i++)
        {
           
            for(int l=min(arr[i].dead,n)-1;l>=0;l--)
            {
                if(slot[l]==false){
                    
                slot[l]=true;
                result[l]=i;
                break;
                }
            }
            
            
        }
        for(int i=0;i<n;i++)
        {
            if(slot[i]==true)
            {
                s+=arr[result[i]].profit;
                c++;
            }
        }
        
        vector<int> v;
        v.push_back(c);
        v.push_back(s);
        return v;
    } 
